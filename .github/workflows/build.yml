name: Build

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      channel:
        description: electron.builder channel (beta uses a different s3 bucket)
        required: true
        default: latest
        type: choice
        options:
          - latest
          - alpha
          - beta
      run-diff-check:
        description: 'Run diff-check?'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: 'write'

jobs:
  diff-check:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.diff_check.outputs.changed }}
      last_tag: ${{ steps.diff_check.outputs.last_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: git fetch --tags --force --prune
      - id: diff_check
        run: |
          LAST_TAG=$(git describe --tags --match 'v*-nightly' --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "last_tag=false" >> "$GITHUB_OUTPUT"
          else
            echo "last_tag=$LAST_TAG" >> "$GITHUB_OUTPUT"
          fi

          if [[ "${{ github.event.inputs.run-diff-check || 'true' }}" == "true" ]]; then
            if [ -z "$LAST_TAG" ]; then
              # no nightly tag found in history
              echo "changed=true" >> "$GITHUB_OUTPUT"
            elif git diff --quiet "${LAST_TAG}..HEAD"; then
              echo "changed=false" >> "$GITHUB_OUTPUT"
            else
              echo "changed=true" >> "$GITHUB_OUTPUT"
            fi
          else
            # when disabled explicitly: always set changed=true
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi
      - name: debug
        run: |
          echo "changed: ${{ steps.diff_check.outputs.changed }}"
          echo "last_tag: ${{ steps.diff_check.outputs.last_tag }}"

  nightly-settings:
    needs:
      - diff-check
    if: needs.diff-check.outputs.changed == 'true' # run only if there is a diff
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.nightly_info.outputs.tag }}
      app_version: ${{ steps.nightly_info.outputs.app_version }}
      channel: ${{ steps.nightly_info.outputs.channel }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: git fetch --tags --force --prune

      - name: Compute nightly version and settings
        id: nightly_info
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # required for gh CLI to authenticate
        run: |
          set -euo pipefail

          # choice channel name {{
          if [[ -z "${{ github.event.inputs.channel }}" ]]; then
            # default value
            CHANNEL=latest
          else
            CHANNEL="${{ github.event.inputs.channel }}"
          fi
          echo "channel=${CHANNEL}" >> "$GITHUB_OUTPUT"
          # }}

          # version suffix {{
          if [[ "$CHANNEL" == "latest" ]]; then
            VERSION_SUFFIX=""
          else
            VERSION_SUFFIX="-${CHANNEL}"
          fi
          # }}

          DATE=$(date -u +'%Y%m%d')
          BASE_VERSION=$( jq -r '.version | split(".")[:2] | join(".")' package.json )

          # Get the number of existing tags for today
          COUNT=$(gh api "repos/${{ github.repository }}/git/matching-refs/tags/v${BASE_VERSION}.${DATE}" --jq 'length')
          N=$((COUNT + 1))

          APP_VERSION="${BASE_VERSION}.${DATE}${N}${VERSION_SUFFIX}"

          # Build the final version string
          echo "tag=v${APP_VERSION}-nightly" >> "$GITHUB_OUTPUT"

          # application version
          echo "app_version=${APP_VERSION}" >> "$GITHUB_OUTPUT"


      - name: Debug
        shell: bash
        run: |
          echo "nightly tag: ${{ steps.nightly_info.outputs.tag }}"
          echo "nightly app_version: ${{ steps.nightly_info.outputs.app_version }}"
          echo "nightly channel: ${{ steps.nightly_info.outputs.channel }}"

      - name: Create nightly tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.nightly_info.outputs.tag }} ${{ github.sha }}
          git push --tags

  changelog:
    needs:
      - diff-check
      - nightly-settings
    runs-on: ubuntu-latest
    outputs:
      body: ${{ steps.notes.outputs.body }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog via GitHub
        id: notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LAST="${{ needs.diff-check.outputs.last_tag }}"
          TO="${{ needs.nightly-settings.outputs.tag }}"
          if [[ -z "$LAST" || "$LAST" == "false" ]]; then
            BODY="none"
          else
            BODY=$(gh api "repos/${GITHUB_REPOSITORY}/releases/generate-notes" \
                    -f tag_name="$TO" \
                    -f previous_tag_name="$LAST" \
                    --jq '.body')
          fi
          {
            echo 'body<<EOF'
            printf '%s\n' "$BODY"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Debug
        run: |
          echo "${{ steps.notes.outputs.body }}"

  build:
    needs:
      - nightly-settings
      - changelog
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-14
          - ubuntu-latest
          - windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug
        shell: bash
        run: |
          echo "nightly tag=${{ needs.nightly-settings.outputs.tag }}"
          echo "nightly app_version=${{ needs.nightly-settings.outputs.app_version }}"
          echo "nightly channel=${{ needs.nightly-settings.outputs.channel }}"
          echo "nightly changelog=${{ needs.changelog.outputs.body }}"

      - name: Nightly mode env settings
        shell: bash
        run: |
          # choice s3 bucket for publishing {{
          if [[ "${{ needs.nightly-settings.outputs.channel }}" == "beta" ]]; then
            S3_BUCKET="${{secrets.NIGHTLY_AWS_S3_BUCKET_BETA}}"
          else
            S3_BUCKET="${{secrets.NIGHTLY_AWS_S3_BUCKET}}"
          fi
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          # }}

          echo "MIDDLEWARE_VERSION=${{ steps.anytype-heart-nightly-info.outputs.release_name }}" >> $GITHUB_ENV

      - name: Nightly mode edit package.json
        shell: bash
        run: |
          jq \
            --tab \
            '
            .name = "anytype-dev" |
            .version = "${{ needs.nightly-settings.outputs.app_version }}" |
            .description = "Anytype Nightly"
          ' package.json > tmp.json && mv tmp.json package.json

      - name: debug cat package.json
        shell: bash
        run: cat package.json

  clean-nightly-tags:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: git fetch --tags --force --prune

      - name: Compute nightly version and settings
        id: nightly_info
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # required for gh CLI to authenticate
        run: |
          # list -> filter -> delete via API
          gh api repos/${GITHUB_REPOSITORY}/git/matching-refs/tags \
          | jq -r '.[].ref' | sed 's#^refs/tags/##' \
          | grep -E '^v.*-nightly.*$' \
          | while read -r t; do echo "$(git log -1 --format=%ct "refs/tags/$t") $t"; done \
          | sort -n | head -n -10 | cut -d' ' -f2- \
          | xargs -r -I{} gh api -X DELETE repos/${GITHUB_REPOSITORY}/git/refs/tags/{}


  notify:
    needs:
      - build
      - clean-nightly-tags
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack (workflow result)
        run: |
          echo "status: ${{ (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) && 'failure' || 'success' }}"
          echo "notification_title: ${{ (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) && '❌' || '✅' }} {workflow}"
          echo "message_format: {emoji} *{workflow}* finished with {status_message}"

