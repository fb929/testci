name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:


permissions:
  actions: 'write'
  packages: 'write'
  contents: 'write'


jobs:
  diff-check:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.diff_check.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: git fetch --tags --force --prune
      - id: diff_check
        run: |
          LAST_TAG=$(git describe --tags --match 'v*-nightly.*' --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # no nightly tag found in history
            echo "changed=true" >> "$GITHUB_OUTPUT"
          elif git diff --quiet "${LAST_TAG}..HEAD"; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi
  build:
    runs-on: ubuntu-latest
    needs: diff-check
    if: needs.diff-check.outputs.changed == 'true' # only run if changed
    steps:
      - name: build
        run: echo 'testbytest release' > build.txt

      - name: Compute nightly version
        id: nightly_info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # required for gh CLI to authenticate
        run: |
          set -euo pipefail
          DATE=$(date -u +'%Y%m%d')
          PREFIX="v1.2.4-nightly.${DATE}"

          # Get the number of existing tags for today
          COUNT=$(gh api "/repos/${{ github.repository }}/git/matching-refs/tags/$PREFIX" --jq 'length')
          N=$((COUNT + 1))

          # Build the final version string
          VERSION="${PREFIX}.${N}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.nightly_info.outputs.version }} # create new tag
          target_commitish: ${{ github.sha }}                 # set current commit for new tag
          prerelease: true
          make_latest: false
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: build.txt

      - name: Get release body
        id: release_info
        uses: actions/github-script@v7
        with:
          script: |
            const release_id = Number(`${{ steps.release.outputs.id }}`);
            const { data } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id
            });
            core.setOutput('body', data.body || '');
            core.setOutput('html_url', data.html_url);
            core.setOutput('tag_name', data.tag_name);

      - name: Debug
        run: |
          echo "release body: ${{ steps.release_info.outputs.body }}"
          echo "tag_name : ${{ steps.release_info.outputs.tag_name }}"
